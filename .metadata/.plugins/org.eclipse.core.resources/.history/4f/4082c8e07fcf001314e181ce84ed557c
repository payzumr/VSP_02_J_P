package starter;

import java.util.LinkedList;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

import monitor.Monitor;
import ggt.Koordinator;
import ggt.Process;
import ggt.ProcessHelper;
import ggt.ProcessPOA;

public class ProcessImpl extends ProcessPOA implements Runnable {
	private String name;
	private POA poa;

	private volatile boolean running = true;
	private LinkedList<Integer> newNumbers = new LinkedList<Integer>();//neue werte der nachbarn
	private LinkedList<String> newMarkers = new LinkedList<String>();//namen der nachbarn die marker geschickt haben
	private LinkedList<Integer> newSeqNumbers = new LinkedList<Integer>();//seqNr. der marker 

	//queue ueber commandos von anderen przessen(neue werte/marker)
	private BlockingQueue<ProcessStatus> commandFifo = new LinkedBlockingQueue<ProcessStatus>();

	private Process rightNeighbor;
	private Process leftNeighbor;
	private int delay;
	private Monitor theMonitor;
	private Koordinator koor;
	private Thread tp;
	private int mi;

	//variablen fuer terminierungsalgorithmus
	private boolean rightMark = false;
	private boolean leftMark = false;
	private boolean terminateMark = false;
	private int sequenceNumber = 0;

	public ProcessImpl(String name, POA poa) {
		super();
		this.tp = new Thread(this);
		this.name = name;
		this.poa = poa;
	}

	/**
	 * gibt namen des prozesses zurueck
	 */
	@Override
	public synchronized String name() {
		return name;
	}

	/**
	 * nachbarn können hier neue werte melden
	 * es wird der monitor benachrichtigt und der neue wert in die linkedlist geschrieben
	 */
	@Override
	public synchronized void newNumber(int number, String name) {
		theMonitor.rechnen(this.name, name, number);
		newNumbers.add(number);
		commandFifo.add(ProcessStatus.CALCULATE);
	}

	/**
	 * nachbarn können hier neue marker mit seqNr melden
	 * traegt marker in die linkedlist ein, wenn die seqNr aktuell ist
	 */
	@Override
	public synchronized void sendMarker(String terminator, int seqN) {

		if (sequenceNumber <= seqN) {//anfrage wird verworfen, wenn sie eine veraltete seqN hat

			newMarkers.add(terminator);
			newSeqNumbers.add(seqN);
			commandFifo.add(ProcessStatus.TERMINATE);
		}

	}

	/**
	 * beendet den Prozess
	 */
	@Override
	public synchronized void quit(String starterName) {
		running = false;
		System.out.println(this.name + "beendet");

	}

	/**
	 * initialisiert Prozessvariablen
	 */
	@Override
	public synchronized void init(Process rightNeighbor, Process leftNeighbor,
			int startGGT, int delay, Monitor theMonitor, Koordinator koor) {
		this.rightNeighbor = rightNeighbor;
		this.leftNeighbor = leftNeighbor;
		this.delay = delay;
		this.theMonitor = theMonitor;
		this.koor = koor;
		this.mi = startGGT;

	}

	/**
	 * methode fuer koordinator zum starteten des ggt algorithmus
	 */
	@Override
	public synchronized void startCalulation() {
		leftNeighbor.newNumber(mi, this.name);
		rightNeighbor.newNumber(mi, this.name);
	}

	/**
	 * prueft ob neue commands in der queue sind und fuhrt diese aus
	 */
	@Override
	public void run() {
		while (running) {

			if (!commandFifo.isEmpty()) {
				switch (commandFifo.poll()) {
				case CALCULATE:
					calculateMi();
					break;

				case TERMINATE:
					snapshot();
					break;
				default:

					break;
				}
			}
		}
	}

	/**
	 * snapshot algorithmus
	 */
	private void snapshot() {
		//System.out.println("neue nummer: " + newSeqNumbers.getFirst() + "alte seq: " + sequenceNumber);
		
		/*
		 * wenn marker mit neuer seqN eingetroffen ist, werden variablen zurueckgesetzt
		 * und benachrichtigt nachbarn
		 */ 
		if (newSeqNumbers.getFirst() > sequenceNumber) {
			rightMark = false;
			leftMark = false;
			terminateMark = true;
			sequenceNumber = newSeqNumbers.poll();
			rightNeighbor.sendMarker(this.name, sequenceNumber);
			leftNeighbor.sendMarker(this.name, sequenceNumber);
		}else{
			newSeqNumbers.poll();
		}
		
		/*
		 * wenn die nachricht von einem nachbarn eingetroffen ist,
		 *  wird der entsprechende marker true gesetzt
		 */
		//System.out.println("new marker: " + newMarkers.getFirst() + "rightmarker");
		if (rightNeighbor.name().equals(newMarkers.getFirst())) {
			rightMark = true;
		}
		if (leftNeighbor.name().equals(newMarkers.getFirst())) {
			leftMark = true;
		}

		//wenn die marker von beiden nachbarn true sind, wird der koordinator informiert
		if (rightMark && leftMark) {
			if (terminateMark) {//nachricht, das prozess fertig ist
				Process pro;
				try {
					pro = ProcessHelper.narrow(poa.servant_to_reference(this));
					koor.terminationCcheck(pro, sequenceNumber, true);
				} catch (ServantNotActive | WrongPolicy e) {
					e.printStackTrace();
				}
			} else {//nachricht, dass prozess noch nicht fertig ist
				Process pro;
				try {
					pro = ProcessHelper.narrow(poa.servant_to_reference(this));
					koor.terminationCcheck(pro, sequenceNumber, false);
				} catch (ServantNotActive | WrongPolicy e) {
					e.printStackTrace();
				}

			}
		}
		
		//monitor wird informiert, dass prozess fertig/noch nicht fertig ist
		if(rightMark && leftMark && terminateMark){
			
			theMonitor.terminieren(name, newMarkers.poll(), true);
		}else{
			theMonitor.terminieren(name, newMarkers.poll(), false);
		}
	}
/**
 * berechnet neues Mi mithilfe des alten Mi und neum wert des nachbarn
 */
	private void calculateMi() {
		if (newNumbers.getFirst() < mi) {
			try {
				Thread.sleep(delay);// simulate complex calculation
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			mi = ((mi - 1) % newNumbers.poll()) + 1;

			terminateMark = false;//terminate marker wird zurueckgesetzt
			
			//nachbarn neuen wert mitteilen
			rightNeighbor.newNumber(mi, this.name);
			leftNeighbor.newNumber(mi, this.name);
		} else {
			newNumbers.poll();
		}

	}

	public Thread getThread() {
		return this.tp;
	}
	
	@Override
	public int mi() {
		return mi;
	}


}
