// IDL fuer das GGT-Projekt.
// Version SS 2013


module monitor {

  typedef sequence<string> ProzessIds;
  typedef sequence<long> Startzahlen;



  interface Monitor {
    /*
     * Bekanntgabe der Ringzusammensetzung. 
     * Ring wird als String-Array uebergeben.
     * In dem Array sind die IDs der beteiligten Prozesse anzugeben.
     * Die Ids sollen sich zusammensetzen aus dem Namen des Starters 
     * und einer vom Starter vergebenen fortlaufenden Nummer.
     */
    void ring( in ProzessIds prozessIds );
    
    /*
     * Bekanntgabe der Startzahlen der beteiligten Prozesse.
     * Zahlen werden in einem Integer-Array uebergeben.
     * Laenge des Startzahlen-Arrays muss mit der Laenge des Prozessids-Arrays uebereinstimmen.
     */
    void startzahlen( in Startzahlen startzahlen );
    
    /*
     * Mitteilung an den Monitor, dass von einem Prozess eine neue Zahl empfangen wurde.
     * Mitteilung soll auch gesendet werden, wenn die Zahl vom Prozess nicht bearbeitet wurde, 
     * weil sie zu gross war.
     * Parameter enthalten die Angaben, welcher Prozess die Zahl empfangen hat, von welchem
     * Prozess sie gesendet wurde und welche Zahl uebertragen wurde.
     */
    void rechnen( in string prozessId, in string prozessIdAbsender, in long num );
    

    /*
     * Mitteilung an den Monitor, dass von einem Prozess eine Terminierungsanfrage empfangen wurde.
     * Parameter enthalten die Angaben, welcher Prozess die Anfrage empfangen hat, von wem sie
     * urspruenglich gesendet wurde und ob terminiert werden soll.
     */
    void terminieren( in string prozessId, in string prozessIdAbsender, in boolean terminiere );
    
    /*
     * Mit diesem Aufruf soll der Koordinator das Ergebnis seiner Berechnung an den
     * Monitor uebergeben.
     */
    void ergebnis( in string prozessId, in long num );
  };


};

module ggt {
        typedef monitor::Monitor Monitor;
		
		interface Koordinator;

        interface Process { 
                 readonly attribute string name;
                
                 // Methods for the other Processes
                 void newNumber(in long number, in string senderName);
                 void sendMarker(in string terminator, in long seqN);
                  
                 //Methods for the Starter
                 void quit(in string starterName);
                 
                 //Methods for the Koordinator
                 void init(in Process rightNeighbor, in Process leftNeighbor, in long  startGGT, in long delay, in Monitor theMonitor, in Koordinator koor);
                 void startCalulation();
				 long getMi();
        };
        
        interface Starter { 
                exception exInvalidCount{ string s; };
                readonly attribute string name;
                
                //Methods for the Koordinator
                void createProcess(in long count) raises( exInvalidCount );
                void exit();
				void processExit();
        };
        
        typedef sequence<Starter> StarterList;
        
        interface Koordinator { 
                exception exAlreadyExists{ string s;};
                
                // Methods for the Process
                void registerProcess(in Process process) raises( exAlreadyExists );
                void terminationCcheck(in Process terminator, in long seqN, in boolean status);
                
                // Methods for the Starter
                void activateStarter (in Starter starter, in string starterName) raises( exAlreadyExists );
                void deleteStarter (in Starter starter);
				
				// Methods for the Monitor
				void registerMonitor (in Monitor monitor);
                
                // Methods for the Client
                void startCalculation(in long minProcesses, in long maxProcesses, in long minDelay, in long maxDelay, in long timeout, in long ggt);
                StarterList getStarterListe();
                void exit();
        };
};

